{"version":3,"sources":["Components/Common/Preloader/Preloader.tsx","utils/validators/validators.ts","Components/Common/FormsControls/FormsControls.tsx","redux/profile-reducer.ts","utils/object-helpers.ts","redux/users-reducer.ts","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","assets/images/loader.svg","Components/Common/Background/Background.module.css","api/api.ts","serviceWorker.ts","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","redux/app-reducer.ts","redux/auth-selectors.ts","Components/Header/Header.tsx","Components/Common/Background/Background.tsx","App.tsx","redux/redux-store.ts","index.tsx","redux/auth-reducer.ts","Components/Dialogs/Dialogs.module.css","Components/Common/FormsControls/FormsControls.module.css"],"names":["Preloader","src","preloader","alt","required","value","maxLengthCreator","maxLength","length","FormControl","Inp","TextArea","input","meta","touched","error","children","child","element","hasError","finalClassName","s","formControl","className","Textarea","props","restProps","Input","title","console","log","createField","placeholder","name","validate","component","text","field","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","posts","id","message","likesCount","profile","isFetching","status","newPostText","addPostActionCreator","newPostBody","type","deletePostAC","postId","toggleIsFetching","setProfileStatus","getStatus","userId","dispatch","a","profileAPI","response","data","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","getUserProfile","toString","errorTitle","messages","split","slice","toLowerCase","stopSubmit","Promise","reject","usersAPI","getProfile","profileReducer","state","action","newPost","filter","p","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","users","pageSize","totalUsersCount","currentPage","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","page","toggleIsFollowingProgress","requestUsers","term","getUsers","totalUsersCont","totalCount","count","followUnfollowFlow","apiMethod","actionCreator","follow","bind","unfollow","usersReducer","followed","module","exports","instance","axios","create","withCredentials","baseURL","headers","get","then","post","delete","warn","put","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","Boolean","window","location","hostname","match","SEND_MESSAGE","dialogs","img","dialogsReducer","body","newMessageBody","DialogItem","path","NavLink","dialog","to","Message","mes","maxLength15","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","button","Dialogs","dialogsPage","messagesElements","m","key","dialogsElements","d","isAuth","dialogsItems","values","sendMessage","Redirect","compose","connect","addMessageActionCreator","initialized","actions","selectIsAuth","Header","Layout","AppHeader","useSelector","useDispatch","logoutCallback","style","padding","span","ghost","size","onClick","Link","particlesOpt","Background","styles","particles","params","Content","Sider","SubMenu","Menu","UsersContainer","React","lazy","ProfileContainer","Login","App","collapsed","onCollapse","setState","this","initializeApp","minHeight","collapsible","theme","defaultSelectedKeys","mode","icon","UserOutlined","Item","TeamOutlined","Suspense","fallback","Switch","Route","exact","render","DialogsContainer","Component","withRouter","app","promise","getAuthUserData","all","reducers","combineReducers","profilePage","usersPage","authReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","SET_USER_DATA","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","_error","url"],"mappings":"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","file":"static/js/main.38a24bf7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.svg\";\r\n\r\n\r\n\r\nconst Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt={'preloader'}/>\r\n    </div>\r\n}\r\nexport default Preloader;","export const required = (value: any) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if(value && value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\nimport { Input as Inp } from 'antd';\r\n\r\nconst { TextArea } = Inp;\r\n\r\nconst FormControl = (\r\n    {\r\n        input, meta: {touched, error}, child, element, children\r\n    }: any) => {\r\n    const hasError = touched && error\r\n    const finalClassName = hasError ? `${s.formControl} ${s.error}` : s.formControl\r\n    return (\r\n        <div className={finalClassName}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, element, title, ...restProps} = props\r\n    console.log(title)\r\n    return <FormControl {...props}><input {...input} {...restProps} value={title}/></FormControl>\r\n}\r\n\r\nexport const createField = (\r\n    placeholder: string | null,\r\n    name: string,\r\n    validate: Array<any> | null,\r\n    component: React.FC,\r\n    text: string | null,\r\n    restProps: any\r\n) => {\r\n    return (\r\n        <div className={s.field}>\r\n            <Field validate={validate} component={component} name={name} placeholder={placeholder} {...restProps} />\r\n        </div>\r\n    )\r\n}","import {ActionTypes, DispatchType, ProfilePageType, ProfilePhotoType, ProfileType, ThunkType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {RootStateRedux} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Dispatch} from \"react\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst ADD_POST = \"social-network/profile/ADD-POST\";\r\nconst SET_USER_PROFILE = \"social-network/profile/SET_USER_PROFILE\";\r\nconst TOGGLE_IS_FETCHING = 'social-network/TOGGLE_IS_FETCHING';\r\nconst SET_STATUS = 'social-network/profile/SET_STATUS';\r\nconst DELETE_POST = 'social-network/profile/DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'social-network/profile/SAVE_PHOTO_SUCCESS'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    profile: null,\r\n    isFetching: false,\r\n    status: \"\",\r\n    newPostText: ''\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes): any => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SAVE_PHOTO_SUCCESS :\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostBody: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostBody\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const setProfileStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const savePhotoSuccess = (photos: ProfilePhotoType) => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS,\r\n        photos\r\n    } as const\r\n}\r\nexport const getStatus = (userId: string): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setProfileStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch: any, getState) => {\r\n    const userId = getState().auth.id\r\n    const response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === 0) {\r\n        if (userId) {\r\n            dispatch(getUserProfile(userId.toString()))\r\n        }\r\n    } else {\r\n        const errorTitle = response.data.messages[0].split('->')[1].slice(0, -1).toLowerCase()\r\n        dispatch(stopSubmit('edit-profile', {'contacts': {[errorTitle]: response.data.messages[0]} }));\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\nexport const getUserProfile = (userId: string) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const response = await usersAPI.getProfile(userId)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUserProfile(response.data))\r\n}\r\nexport default profileReducer;","export const updateObjectInArray = (items: Array<any>, itemId: any, objPropName: string, newObjProps: any) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {ActionTypes, DispatchType, UserType} from \"./store\";\r\nimport {UsersMapStateToPropsType} from \"../Components/Users/UsersContainer\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'social-network/users/FOLLOW'\r\nconst UNFOLLOW = 'social-network/users/UNFOLLOW'\r\nconst SET_USERS = 'social-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'social-network/users/SET_TOTAL_USER_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'social-network/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'social-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\nconst usersReducer = (state: UsersMapStateToPropsType = initialState, action: ActionTypes): UsersMapStateToPropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.page}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId),\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userID: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n};\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    } as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCont: number) => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCont\r\n    } as const\r\n};\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n};\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n};\r\n\r\nexport const requestUsers = (page: number, pageSize: number, term: string) =>\r\n    async (dispatch: DispatchType) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n        dispatch(setCurrentPage(page))\r\n    }\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: APIMethodType, actionCreator: ACType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let resultCode = await apiMethod(userId)\r\n    if (resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userID: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch, userID, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch, userID, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n\r\n}\r\n\r\ntype APIMethodType = (id: number) => Promise<any>\r\ntype ACType = (userID: number) =>\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess>;\r\n\r\n\r\nexport default usersReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","module.exports = __webpack_public_path__ + \"static/media/loader.dc9a5222.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"particles\":\"Background_particles__6rd0c\"};","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/store\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3999e522-cb4e-4498-8ef3-a2f773a6c74f\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`, {})\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please profileAPI objet.')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get('profile/status/' + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status/', {status})\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put('profile/photo/', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put('profile/', profile)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string) {\r\n        return instance.post(`auth/login/`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login/`)\r\n    }\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\n\r\nconst SEND_MESSAGE = \"social-network/dialogs/ADD-MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://sun1-19.userapi.com/impg/c855032/v855032039/2231b7/6euQqUV0YMQ.jpg?size=200x0&quality=88&crop=6,5,1288,1288&sign=83bf255e018a05d0f8b73055341a71f7&c_uniq_tag=AHl_dkk5RHNoYgPMQ8zNoJj8ZqBCmaFOlda9WWmeP_k&ava=1\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ]\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsContainerType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\nconst maxLength15 = maxLengthCreator(15)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLength15]}\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"Enter your message\"}\r\n                />\r\n                <button className={s.button}>➤</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    // withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\nimport {ThunkType} from \"./store\";\r\n\r\nconst INITIALIZED_SUCCESS = 'SN/APP/INITIALIZED_SUCCESS'\r\n\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n};\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    initializedSuccess: (): InitializedSuccessActionType => ({type: INITIALIZED_SUCCESS} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    const promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n           dispatch(actions.initializedSuccess())\r\n        })\r\n};\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}","import {RootStateRedux} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: RootStateRedux) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const selectCurrentUserLogin = (state: RootStateRedux) => {\r\n    return state.auth.login\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Button, Col, Layout, Row} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nconst {Header} = Layout;\r\n\r\nexport const AppHeader = () => {\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const dispatch = useDispatch();\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n    return (\r\n        <Header className=\"site-layout-background\" style={{padding: 0}}>\r\n            <Row>\r\n                <Col span={22}/>\r\n                <Col span={2}>\r\n                    {isAuth ? <Button type={'ghost'} ghost size={'middle'} onClick={logoutCallback}>Logout</Button> :\r\n                        <Button type={'ghost'} ghost size={'middle'} onClick={logoutCallback}>\r\n                            <Link to={'/login'}>Login</Link>\r\n                        </Button>}\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport styles from \"./Background.module.css\";\r\nimport Particles from \"react-particles-js\";\r\n\r\nconst particlesOpt = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 150,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 1000\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst Background = () => {\r\n    return (\r\n        <Particles className={styles.particles} params={particlesOpt}/>\r\n    );\r\n};\r\n\r\nexport default Background;","import React from 'react';\nimport {Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {RootStateRedux} from \"./redux/redux-store\";\nimport {AppHeader} from \"./Components/Header/Header\";\nimport \"./App.css\";\nimport 'antd/dist/antd.css';\n\nimport {Layout, Menu} from 'antd';\nimport {TeamOutlined, UserOutlined,} from '@ant-design/icons';\nimport Background from \"./Components/Common/Background/Background\";\n\nconst {Content, Sider} = Layout;\nconst {SubMenu} = Menu;\n\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileContainer'));\nconst Login = React.lazy(() => import('./Components/Login/Login'));\n\nclass App extends React.Component<AppPropsType> {\n    state = {\n        collapsed: true,\n    };\n    onCollapse = (collapsed: boolean) => {\n        console.log(collapsed);\n        this.setState({collapsed});\n    };\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        const {collapsed} = this.state;\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                        <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Profile\">\n                            <Menu.Item key=\"1\">\n                                <Link to=\"/profile\">Profile</Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"2\">\n                                <Link to=\"/dialogs\">Messages</Link>\n                            </Menu.Item>\n                        </SubMenu>\n                        <Menu.Item key=\"3\" icon={<TeamOutlined/>}>\n                            <Link to=\"/users\">Users</Link>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout className=\"site-layout\">\n                    <AppHeader/>\n                    <Content className={\"content\"}>\n                        <div className={\"back\"}>\n                            <Background/>\n                        </div>\n                        <div className={\"front\"}>\n                            <React.Suspense fallback={<Preloader/>}>\n                                <Switch>\n                                    <Route exact path=\"/\"\n                                           render={() => <Redirect to={\"/profile\"}/>}/>\n                                    <Route exact path=\"/social-network\"\n                                           render={() => <Redirect to={\"/profile\"}/>}/>\n                                    <Route path=\"/profile/:userId?\"\n                                           render={() => <ProfileContainer/>}/>\n                                    <Route path=\"/users\"\n                                           render={() => <UsersContainer/>}/>\n                                    <Route path=\"/login\" render={() => <Login/>}/>\n                                    <Route path=\"/dialogs\"\n                                           render={() => <DialogsContainer/>}/>\n                                    <Route path=\"/!*\" render={() => <div>404 NOT FOUND</div>}/>\n                                </Switch>\n                            </React.Suspense>\n                        </div>\n                    </Content>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, {initializeApp}))(App);\n\ntype OwnPropsType = {}\ntype MapStateToPropsType = {\n    initialized: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: any\n}\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n","import {compose, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers> & ReturnType<typeof applyMiddleware>\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n","import {ActionTypes, DispatchType, ThunkType} from \"./store\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'social-network/auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'social-network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nlet initialState: AuthReducerType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n};\r\nconst authReducer = (state: AuthReducerType = initialState, action: ActionTypes): AuthReducerType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number|null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n};\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n    } as const\r\n};\r\nexport const getAuthUserData = () => async (dispatch: DispatchType) => {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch: any) => {\r\n    const response = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        if (response.data.resultCode === 10) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n};\r\nexport const logout = () => async (dispatch: DispatchType) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: DispatchType) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type AuthReducerType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype SetAuthUserDataPayloadType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: SetAuthUserDataPayloadType\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2x2Pb\",\"error\":\"FormsControls_error__1NuZ5\",\"formSummaryError\":\"FormsControls_formSummaryError__ytgZ7\"};"],"sourceRoot":""}