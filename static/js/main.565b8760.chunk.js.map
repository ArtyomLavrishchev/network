{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Users/Users.module.css","assets/images/loader.svg","Components/Profile/Profile.module.css","serviceWorker.ts","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","api/api.ts","utils/object-helpers.ts","redux/users-reducer.ts","Components/Common/Paginator/Paginator.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","Components/Common/Preloader/Preloader.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.ts","Components/Profile/Profile.tsx","hoc/WithAuthRedirect.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","redux/app-reducer.ts","App.tsx","redux/redux-store.ts","index.tsx","Components/Common/FormsControls/FormsControls.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/MyPosts.module.css","assets/images/user-profile-icon-png.png","Components/Common/Paginator/Paginator.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","NavBar","className","s","nav","item","NavLink","to","activeClassName","activeLink","News","Music","Settings","SEND_MESSAGE","initialState","dialogs","id","name","img","messages","message","dialogsReducer","state","action","type","body","newMessageBody","DialogItem","props","path","dialog","src","Message","mes","FormControl","input","meta","touched","error","children","child","element","hasError","finalClassName","formControl","Textarea","restProps","Input","createField","placeholder","validate","component","text","field","Field","required","value","maxLengthCreator","maxLength","length","maxLength15","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","button","Dialogs","dialogsPage","messagesElements","map","m","key","dialogsElements","d","isAuth","dialogsItems","values","sendMessage","Redirect","compose","connect","auth","dispatch","addMessageActionCreator","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","post","resultCode","unfollow","delete","getProfile","userId","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","page","toggleIsFetching","toggleIsFollowingProgress","followUnfollowFlow","apiMethod","actionCreator","a","usersReducer","followed","count","filter","Paginator","pagesCount","Math","ceil","pages","i","push","wrapper","p","pageClass","selectedPage","onClick","e","onPageChanged","User","user","photos","small","userPhoto","photo","alt","disabled","some","Users","Preloader","preloader","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","React","Component","bind","totalUsersCont","totalCount","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","ProfileInfo","profile","ava","large","fullName","lookingForAJobDescription","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","posts","likesCount","setProfileStatus","profileReducer","newPost","newPostBody","newPostText","postId","Post","deletePost","like","MyPosts","memo","postsElements","AddPostFormRedux","addPost","maxLength10","MyPostsContainer","profilePage","addPostActionCreator","deletePostAC","Profile","mapStateToPropsForRedirect","ProfileContainer","params","String","authorisedUserId","getUserProfile","RedirectComponent","withRouter","Header","header","loginBlock","login","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","maxLength40","LoginReduxForm","formSummaryError","stopSubmit","_error","fomData","initialized","actions","App","initializeApp","Route","render","DialogsContainer","app","promise","Promise","all","reducers","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.565b8760.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__hC89A\"};","module.exports = __webpack_public_path__ + \"static/media/loader.dc9a5222.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\n\r\nconst SEND_MESSAGE = \"social-network/dialogs/ADD-MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ]\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = (\r\n    {\r\n        input, meta: {touched, error}, child, element, children\r\n    }: any) => {\r\n    const hasError = touched && error\r\n    const finalClassName = hasError ? `${s.formControl} ${s.error}` : s.formControl\r\n    return (\r\n        <div className={finalClassName}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (\r\n    placeholder: string | null,\r\n    name: string,\r\n    validate: Array<any> | null,\r\n    component: React.FC,\r\n    text: string | null,\r\n    restProps: any\r\n) => {\r\n    return (\r\n        <div className={s.field}>\r\n            <Field validate={validate} component={component} name={name} placeholder={placeholder} {...restProps}/>\r\n        </div>\r\n    )\r\n}","export const required = (value: any) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if(value && value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsContainerType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\nconst maxLength15 = maxLengthCreator(15)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLength15]}\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"Enter your message\"}\r\n                />\r\n                <button className={s.button}>➤</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    // withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3999e522-cb4e-4498-8ef3-a2f773a6c74f\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`, {})\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please profileAPI objet.')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get('profile/status/' + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status/', {status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login/`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login/`)\r\n    }\r\n}","export const updateObjectInArray = (items: Array<any>, itemId: any, objPropName: string, newObjProps: any) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {ActionTypes, DispatchType, UserType} from \"./store\";\r\nimport {UsersMapStateToPropsType} from \"../Components/Users/UsersContainer\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = 'social-network/users/FOLLOW'\r\nconst UNFOLLOW = 'social-network/users/UNFOLLOW'\r\nconst SET_USERS = 'social-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'social-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'social-network/users/SET_TOTAL_USER_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'social-network/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'social-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\nconst usersReducer = (state: UsersMapStateToPropsType = initialState, action: ActionTypes): UsersMapStateToPropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userID, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.page}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId),\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userID: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n};\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        page\r\n    } as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCont: number) => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCont\r\n    } as const\r\n};\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n};\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n};\r\n\r\nexport const requestUsers = (page: number, pageSize: number) =>\r\n    async (dispatch: DispatchType) => {\r\n        dispatch(toggleIsFetching(true))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n        dispatch(setCurrentPage(page))\r\n    }\r\n\r\nconst followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: APIMethodType, actionCreator: ACType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let resultCode = await apiMethod(userId)\r\n    if (resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\nexport const follow = (userID: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch, userID, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userID: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        followUnfollowFlow(dispatch, userID, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n\r\n}\r\n\r\ntype APIMethodType = (id: number) => Promise<any>\r\ntype ACType = (userID: number) =>\r\n    ReturnType<typeof followSuccess> |\r\n    ReturnType<typeof unfollowSuccess>;\r\n\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\n\r\nexport type PaginatorPropsType = {\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator = (props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++)\r\n        pages.push(i)\r\n\r\n\r\n    return <div className={s.wrapper}>\r\n        {pages.map(p => {\r\n            let pageClass = `${s.pages} ${props.currentPage === p ? s.selectedPage: ''}`\r\n            return <span\r\n                onClick={((e) => props.onPageChanged(p))}\r\n                className={pageClass}>\r\n                    {p}\r\n                </span>\r\n        })}\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-profile-icon-png.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../redux/store\";\r\n\r\nexport type UserPropsType = {\r\n    user: UserType\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const User: React.FC<UserPropsType> = (\r\n    {\r\n        user,\r\n        followingInProgress,\r\n        unfollow,\r\n        follow\r\n    }) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small ? user.photos.small : userPhoto}\r\n                             className={s.photo}\r\n                             alt={\"avatar\"}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed ?\r\n                        <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => {\r\n                                    unfollow(user.id)\r\n                                }}>\r\n                            Unfollow\r\n                        </button> :\r\n                        <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                onClick={() => {\r\n                                    follow(user.id)\r\n                                }}>\r\n                            Follow\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n            </span>\r\n            <span>\r\n                <div>\"user.location.country\"</div>\r\n                <div>\"user.location.city\"</div>\r\n            </span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Paginator} from \"../Common/Paginator/Paginator\";\r\nimport {UserType} from \"../../redux/store\";\r\nimport {User} from \"./User\";\r\n\r\nexport type UserPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users: React.FC<UserPropsType> = (\r\n    {\r\n        pageSize,\r\n        currentPage,\r\n        totalUsersCount,\r\n        onPageChanged,\r\n        follow,\r\n        unfollow,\r\n        followingInProgress,\r\n        ...props\r\n    }) => {\r\n    return <div>\r\n        <Paginator pageSize={pageSize} totalUsersCount={totalUsersCount} currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}/>\r\n        <div>\r\n            {props.users.map((u) =>\r\n                <User user={u}\r\n                      follow={follow}\r\n                      unfollow={unfollow}\r\n                      followingInProgress={followingInProgress}/>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.svg\";\r\n\r\n\r\n\r\nconst Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt={'preloader'}/>\r\n    </div>\r\n}\r\nexport default Preloader;","import {RootStateRedux} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: RootStateRedux) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: RootStateRedux) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: RootStateRedux) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateRedux) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: RootStateRedux) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootStateRedux) => {\r\n    return state.usersPage.followingInProgress\r\n}","import {connect} from \"react-redux\";\r\nimport {follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype OwnPropsType = {}\r\nexport type  UsersMapStateToPropsType = {\r\n    users: any\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (UserId: number) => void\r\n    unfollow: (UserId: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\ntype PropsType = UsersMapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <Preloader/> :\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): UsersMapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<UsersMapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {follow, unfollow, requestUsers})\r\n)(UsersContainer)","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {!editMode &&\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"Your status:\"}</span>}\r\n            </div>\r\n            <div>\r\n                {editMode &&\r\n                <input onChange={onStatusChange} autoFocus onBlur={deActivateEditMode} value={status}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../../assets/images/user-profile-icon-png.png\"\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus}) => {\r\n    if (profile) {\r\n        return <div className={s.item}>\r\n            <div>\r\n                <img className={s.ava} src={profile.photos.large ? profile.photos.large : userPhoto}\r\n                     alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.fullName}>\r\n                <h2>{profile.fullName}</h2>\r\n            </div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            <div>\r\n                {profile.lookingForAJobDescription}\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <Preloader/>\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionTypes, DispatchType, ProfilePageType, ProfileType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"social-network/profile/ADD-POST\";\r\nconst SET_USER_PROFILE = \"social-network/profile/SET_USER_PROFILE\";\r\nconst TOGGLE_IS_FETCHING = 'social-network/TOGGLE_IS_FETCHING';\r\nconst SET_STATUS = 'social-network/profile/SET_STATUS';\r\nconst DELETE_POST = 'social-network/profile/DELETE_POST'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    profile: null,\r\n    isFetching: false,\r\n    status: \"\"\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostBody: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostBody\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: number) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const setProfileStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setProfileStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => async (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetching(true))\r\n    const response = await usersAPI.getProfile(userId)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n    deletePost?: (postId: number) => void\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    const deletePost = () => {\r\n        props.deletePost && props.deletePost(props.id)\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div onClick={deletePost} className={s.delete}>Delete post</div>\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}\r\n            deletePost={props.deletePost}\r\n        />)\r\n\r\n    let addPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLength10]}\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newPostBody\"}\r\n                    placeholder={\"What's new?\"}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: \"profileAddPostForm\"})(AddPostForm)\r\nexport default MyPosts;","import {addPostActionCreator, deletePostAC} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../redux/redux-store\";\r\nimport {PostsType} from \"./Post/Post\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nexport type MyPostsContainerType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        },\r\n        deletePost: (postId: number) => {\r\n            dispatch(deletePostAC(postId))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo, {ProfilePropsType} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div className={s.item}>\r\n        <ProfileInfo profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: React.FC) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router'\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isFetching: boolean\r\n    status: string\r\n    authorisedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (UserId: string) => void\r\n    getStatus: (UserId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype OwnPropsType = {}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorisedUserId)\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                />\r\n            }</>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isFetching: state.profilePage.isFetching,\r\n        status: state.profilePage.status,\r\n        authorisedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus})\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthMapStateToPropsType} from \"./HeaderContainer\";\r\n\r\ntype HeaderType = AuthMapStateToPropsType & {\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"\r\n                alt={'avatar'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login}  <button onClick={props.logout}>Logout</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {ActionTypes, DispatchType} from \"./store\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport type AuthReducerType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nconst SET_USER_DATA = 'social-network/auth/SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\nconst authReducer = (state: AuthReducerType = initialState, action: ActionTypes): AuthReducerType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {id, email, login, isAuth}\r\n    } as const\r\n};\r\nexport const getAuthUserData = () => async (dispatch: DispatchType) => {\r\n    const response = await authAPI.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: any) => {\r\n    const response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}))\r\n    }\r\n};\r\nexport const logout = () => async (dispatch: DispatchType) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../../redux/auth-reducer\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {}\r\nexport type AuthMapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype AuthMapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type AuthPropsType = AuthMapStateToPropsType & AuthMapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): AuthMapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\nexport default connect<AuthMapStateToPropsType, AuthMapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nconst maxLength40 = maxLengthCreator(40)\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (\r\n    {\r\n        handleSubmit,\r\n        error\r\n    }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required, maxLength40], Input, null, null)}\r\n            {createField(\"Password\", \"password\", [required, maxLength40], Input, null, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", null, Input, \"remember me\", {type: \"checkbox\"})}\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (fomData: FormDataType) => {\r\n        props.login(fomData.email, fomData.password, fomData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    const promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n           dispatch(actions.initializedSuccess())\r\n        })\r\n};","import React from 'react';\nimport {Route, withRouter} from \"react-router-dom\"\nimport \"./App.css\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {RootStateRedux} from \"./redux/redux-store\";\nimport Preloader from \"./Components/Common/Preloader/Preloader\";\n\ntype OwnPropsType = {}\ntype MapStateToPropsType = {\n    initialized: boolean\n}\ntype MapDispatchToPropsType = {\n    initializeApp: any\n}\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\n\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <NavBar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile/:userId?\"\n                           render={() => <ProfileContainer/>}/>\n                    <Route path=\"/users\"\n                           render={() => <UsersContainer/>}/>\n                    <Route path=\"/dialogs\"\n                           render={() => <DialogsContainer/>}/>\n                    <Route path=\"/news\" render={() => <News/>}/>\n                    <Route path=\"/music\" render={() => <Music/>}/>\n                    <Route path=\"/settings\" render={() => <Settings/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateRedux): MapStateToPropsType => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, {initializeApp}))(App);\n","import {compose, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n});\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers> & ReturnType<typeof applyMiddleware>\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2x2Pb\",\"error\":\"FormsControls_error__1NuZ5\",\"formSummaryError\":\"FormsControls_formSummaryError__ytgZ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","module.exports = __webpack_public_path__ + \"static/media/user-profile-icon-png.b3e90dfe.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Paginator_wrapper__1Xpzs\",\"pages\":\"Paginator_pages__3darZ\",\"selectedPage\":\"Paginator_selectedPage__1mYpy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"fullName\":\"ProfileInfo_fullName__2tX4D\",\"job\":\"ProfileInfo_job__1vldL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\",\"delete\":\"Post_delete__15KiY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\",\"loginBlock\":\"Header_loginBlock__1zz0x\"};"],"sourceRoot":""}