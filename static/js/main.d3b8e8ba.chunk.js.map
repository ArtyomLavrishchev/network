{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Users/Users.module.css","Components/Profile/MyPosts/MyPosts.module.css","assets/images/user-profile-icon-png.png","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","assets/images/loader.svg","Components/Profile/Profile.module.css","Components/Navbar/Navbar.module.css","serviceWorker.ts","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","Components/Users/Users.tsx","Components/Common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.ts","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","NavBar","className","s","nav","item","NavLink","to","activeClassName","activeLink","News","Music","Settings","initialState","dialogs","id","name","img","messages","message","newMessageText","dialogsReducer","state","action","type","newText","DialogItem","props","path","dialog","src","Message","mes","Dialogs","dialogsPage","messagesElements","map","m","key","dialogsElements","d","newMessageBody","isAuth","dialogsItems","text","onChange","event","currentTarget","value","updateNewMessageBody","button","onClick","sendMessage","Redirect","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","updateNewMessageTextActionCreator","addMessageActionCreator","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","post","resultCode","delete","userId","authAPI","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowingProgress","usersReducer","u","userID","followed","count","filter","Users","pagesCount","Math","ceil","pages","i","push","item1","p","pageClass","selectedPage","e","onPageChanged","photos","small","userPhoto","photo","alt","disabled","some","unfollow","follow","status","Preloader","preloader","UsersContainer","pageNumber","getUsers","usersPage","followSuccess","unfollowSuccess","items","totalCount","setCurrentPage","ProfileInfo","profile","ava","large","description","fullName","lookingForAJobDescription","posts","likesCount","newPostText","profileReducer","newPost","Post","trim","like","MyPosts","postsElements","updateNewPostText","addPost","MyPostsContainer","profilePage","addPostActionCreator","Profile","ProfileContainer","params","getUserProfile","withRouter","Header","header","loginBlock","login","email","authReducer","HeaderContainer","getAuthUserData","setAuthUserData","Login","App","Route","render","DialogsContainer","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d3b8e8ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__hC89A\",\"pages\":\"Users_pages__2yck5\",\"selectedPage\":\"Users_selectedPage__2rBpW\",\"item1\":\"Users_item1__2zN0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","module.exports = __webpack_public_path__ + \"static/media/user-profile-icon-png.b3e90dfe.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"description\":\"ProfileInfo_description__RuL1S\",\"job\":\"ProfileInfo_job__1vldL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\",\"loginBlock\":\"Header_loginBlock__1zz0x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","module.exports = __webpack_public_path__ + \"static/media/loader.dc9a5222.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ],\r\n    newMessageText: \"\"\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                newMessageText: \"\",\r\n                messages: [...state.messages, {id: 5, message: state.newMessageText}]\r\n            }\r\n\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        newMessageText: newMessageText\r\n    } as const\r\n}\r\nexport const updateNewMessageTextActionCreator = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        newText: newText\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Dialogs: React.FC<DialogsContainerType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage(props.dialogsPage.newMessageText)\r\n    }\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n    let onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newText = event.currentTarget.value;\r\n        props.updateNewMessageBody(newText);\r\n    }\r\n\r\n    let newMessageBody = state.newMessageText;\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea className={s.text} onChange={onMessageChange} value={newMessageBody}/>\r\n                <button className={s.button} onClick={onSendMessageClick}>➤</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n    updateNewMessageBody: (newText: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        updateNewMessageBody: (newText: string) => {\r\n            dispatch(updateNewMessageTextActionCreator(newText))\r\n        },\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"8e56d24b-a385-49e3-992f-359217276cbe\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`, {})\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/`+userId);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {ActionTypes, DispatchType, UserType} from \"./store\";\r\nimport {UsersMapStateToPropsType} from \"../Components/Users/UsersContainer\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\nconst usersReducer = (state: UsersMapStateToPropsType = initialState, action: ActionTypes): UsersMapStateToPropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId),\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userID: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCont: number) => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCont\r\n    } as const\r\n};\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n};\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n};\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) =>\r\n    (dispatch: DispatchType) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n            dispatch(setCurrentPage(currentPage))\r\n        });\r\n    }\r\n\r\nexport const follow = (userID: number) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    usersAPI.follow(userID).then(resultCode => {\r\n        if (resultCode === 0) {\r\n            dispatch(followSuccess(userID))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userID))\r\n    });\r\n}\r\n\r\nexport const unfollow = (userID: number) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    usersAPI.unfollow(userID).then(resultCode => {\r\n        if (resultCode === 0) {\r\n            dispatch(unfollowSuccess(userID))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userID))\r\n    });\r\n}\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-profile-icon-png.png\"\r\nimport {UserType} from \"../../redux/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UserPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: UserPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++)\r\n        pages.push(i)\r\n\r\n\r\n    return <div className={s.item}>\r\n        <div className={s.item1}>\r\n            {pages.map(p => {\r\n                let pageClass = props.currentPage === p ? s.selectedPage : s.pages\r\n                return <span\r\n                    onClick={((e) => props.onPageChanged(p))}\r\n                    className={pageClass}>\r\n                    {p}\r\n                </span>\r\n            })}\r\n        </div>\r\n        {props.users.map((u) =>\r\n            <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                            <img src={u.photos.small ? u.photos.small : userPhoto}\r\n                                 className={s.photo}\r\n                                 alt={\"avatar\"}/>\r\n                                 </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.unfollow(u.id)\r\n                                        }}>\r\n                                    Unfollow\r\n                                </button> :\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.follow(u.id)\r\n                                        }}>\r\n                                    Follow\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                <span>\r\n                        <div>\"u.location.country\"</div>\r\n                        <div>\"u.location.city\"</div>\r\n                    </span>\r\n            </div>\r\n        )}\r\n    </div>\r\n}\r\nexport default Users;","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.svg\";\r\n\r\ntype PreloaderType = {}\r\n\r\nconst Preloader = (props: PreloaderType) => {\r\n    return <div>\r\n        <img src={preloader} alt={'preloader'}/>\r\n    </div>\r\n}\r\nexport default Preloader;","import {connect} from \"react-redux\";\r\nimport {follow, getUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {UserType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype OwnPropsType = {}\r\nexport type  UsersMapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (UserId: number) => void\r\n    unfollow: (UserId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\ntype PropsType = UsersMapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <Preloader/> :\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): UsersMapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<UsersMapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {follow, unfollow, getUsers})\r\n)(UsersContainer)","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../../assets/images/user-profile-icon-png.png\"\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n    if(props.profile) {\r\n        return <div className={s.item}>\r\n            <div>\r\n                <img className={s.ava} src={props.profile.photos.large ? props.profile.photos.large : userPhoto} alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.description}>\r\n                <h2>{props.profile.fullName}</h2>\r\n            </div>\r\n            <div>\r\n                {props.profile.lookingForAJobDescription}\r\n            </div>\r\n        </div>\r\n    }\r\n    else {\r\n        return <Preloader/>\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionTypes, DispatchType, ProfilePageType, ProfileType} from \"./store\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null,\r\n    isFetching: false\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText: newPostText\r\n    } as const\r\n}\r\nexport const updateNewPostTextActionCreator = (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: body\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: string) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUserProfile(response.data))\r\n    })\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message.trim()}\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerType} from \"./MyPostsContainer\";\r\n\r\nconst MyPosts: React.FC<MyPostsContainerType> = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}/>)\r\n\r\n    let addPost = () => {\r\n        props.addPost(props.newPostText);\r\n    }\r\n\r\n    let onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = event.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <textarea className={s.text}\r\n                              onChange={onPostChange}\r\n                              value={props.newPostText}\r\n                    />\r\n                </div>\r\n                <div className={s.button}>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import {addPostActionCreator, updateNewPostTextActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../redux/redux-store\";\r\nimport {PostsType} from \"./Post/Post\";\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsContainerType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        updateNewPostText: (newText: string) => {\r\n            dispatch(updateNewPostTextActionCreator(newText))\r\n        },\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo, {ProfilePropsType} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div className={s.item}>\r\n        <ProfileInfo profile={props.profile}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router'\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (UserId: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype OwnPropsType = {}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '2'\r\n        }\r\n        this.props.getUserProfile(userId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n                <Profile {...this.props} profile={this.props.profile}/>\r\n            }</>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isFetching: state.profilePage.isFetching,\r\n    }\r\n}\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {getUserProfile})\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthMapStateToPropsType} from \"./HeaderContainer\";\r\n\r\nconst Header = (props: AuthMapStateToPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"\r\n                alt={'avatar'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {ActionTypes, DispatchType} from \"./store\";\r\nimport {AuthMapStateToPropsType} from \"../Components/Header/HeaderContainer\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nexport type AuthReducerType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n} | AuthMapStateToPropsType\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\nconst authReducer = (state: AuthReducerType = initialState, action: ActionTypes): AuthReducerType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number, email: string, login: string) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, email, login}\r\n    } as const\r\n};\r\nexport const getAuthUserData = () => (dispatch: DispatchType) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login));\r\n            }\r\n        });\r\n};\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {}\r\nexport type AuthMapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype AuthMapDispatchToPropsType = {\r\n    getAuthUserData: () => void\r\n}\r\nexport type AuthPropsType = AuthMapStateToPropsType & AuthMapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): AuthMapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\nexport default connect<AuthMapStateToPropsType, AuthMapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, {getAuthUserData})(HeaderContainer);","import React from \"react\";\r\n\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport {Route} from \"react-router-dom\"\nimport \"./App.css\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/Login/Login\";\n\n\nconst App = () => {\n    return (\n        <div className=\"app-wrapper\">\n            <HeaderContainer/>\n            <NavBar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile/:userId?\"\n                       render={() => <ProfileContainer/>}/>\n                <Route path=\"/users\"\n                       render={() => <UsersContainer/>}/>\n                <Route path=\"/dialogs\"\n                       render={() => <DialogsContainer/>}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n                <Route path=\"/login\" render={() => <Login/>}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n});\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers> & ReturnType<typeof applyMiddleware>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}