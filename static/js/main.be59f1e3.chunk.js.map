{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","serviceWorker.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","App.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","NavBar","nav","item","NavLink","to","activeClassName","activeLink","ProfileInfo","ava","alt","description","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","push","newText","Post","props","trim","like","MyPosts","postsElements","map","p","key","text","onChange","event","currentTarget","value","updateNewPostText","button","onClick","addPost","MyPostsContainer","connect","profilePage","dispatch","addPostActionCreator","Profile","News","Music","Settings","dialogs","name","img","messages","newMessageText","dialogsReducer","newMessage","DialogItem","path","dialog","Message","mes","Dialogs","dialogsPage","messagesElements","m","dialogsElements","d","newMessageBody","dialogsItems","updateNewMessageBody","sendMessage","DialogsContainer","updateNewMessageTextActionCreator","addMessageActionCreator","App","Route","render","reducers","combineReducers","store","createStore","rerenderEntireTree","ReactDOM","BrowserRouter","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.be59f1e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"description\":\"ProfileInfo_description__RuL1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img className={s.ava} src=\"https://pp.userapi.com/c836122/v836122008/21c67/Y7IEYj7QrEo.jpg\" alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.description}>\r\n                Description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionTypes, ProfilePageType} from \"./store\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    newPostText: \"\"\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            state.posts.push(newPost);\r\n            state.newPostText = \"\"\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n            state.newPostText = action.newText;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText: newPostText\r\n    } as const\r\n}\r\nexport const updateNewPostTextActionCreator = (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: body\r\n    } as const\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message.trim()}\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post, {PostsType} from \"./Post/Post\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    addPost: (newPostText: string) => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}/>)\r\n\r\n    let addPost = () => {\r\n        props.addPost(props.newPostText);\r\n    }\r\n\r\n    let onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = event.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <textarea className={s.text}\r\n                              onChange={onPostChange}\r\n                              value={props.newPostText}\r\n                    />\r\n                </div>\r\n                <div className={s.button}>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, StatePropsType} from \"../../../redux/store\";\r\n\r\nlet mapStateToProps = (state: StatePropsType) => {\r\n    return{\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        updateNewPostText: (newText: string) => {\r\n            dispatch(updateNewPostTextActionCreator(newText))\r\n        },\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile= () => {\r\n    return (\r\n        <div className={s.item}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\nimport {MessageType} from \"../Components/Dialogs/Message/Message\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ],\r\n    newMessageText: \"\"\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: 5,\r\n                message: action.newMessageText\r\n            }\r\n            state.messages.push(newMessage);\r\n            state.newMessageText = \"\";\r\n            return state;\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            state.newMessageText = action.newText;\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        newMessageText: newMessageText\r\n    } as const\r\n}\r\nexport const  updateNewMessageTextActionCreator = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        newText: newText\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MessagesPageType} from \"../../redux/store\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: MessagesPageType\r\n    sendMessage: (newMessageText: string) => void\r\n    updateNewMessageBody: (newText: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage(props.dialogsPage.newMessageText)\r\n    }\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n    let onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newText = event.currentTarget.value;\r\n        props.updateNewMessageBody(newText);\r\n    }\r\n\r\n    let newMessageBody = state.newMessageText;\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea className={s.text} onChange={onMessageChange} value={newMessageBody}/>\r\n                <button className={s.button} onClick={onSendMessageClick}>➤</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, StatePropsType} from \"../../redux/store\";\r\n\r\nlet mapStateToProps = (state: StatePropsType) => {\r\n   return{\r\ndialogsPage: state.dialogsPage\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\nreturn {\r\n    updateNewMessageBody: (newText: string) => {\r\n        dispatch(updateNewMessageTextActionCreator(newText))\r\n    },\r\n    sendMessage: (newMessageText: string) => {\r\n        dispatch(addMessageActionCreator(newMessageText))\r\n    }\r\n}\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (Dialogs);\r\n\r\n\r\nexport default DialogsContainer;","import React from 'react';\nimport {Route} from \"react-router-dom\"\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport Profile from \"./Components/Profile/Profile\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\n\n\nconst App = () => {\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <NavBar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile\"\n                       render={() => <Profile/>}/>\n                <Route path=\"/dialogs\"\n                       render={() => <DialogsContainer/>}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {StatePropsType} from './redux/store';\nimport {Provider} from \"react-redux\";\n\n\nconst rerenderEntireTree = (state: StatePropsType) => {\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root'));\n\n}\nrerenderEntireTree(store.getState());\nstore.subscribe(() => {\n    let state = store.getState()\n    rerenderEntireTree(state)\n});\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}