{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Users/Users.module.css","Components/Navbar/Navbar.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","assets/images/user-profile-icon-png.png","serviceWorker.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.ts","Components/Profile/Profile.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.ts","redux/users-reducer.ts","Components/Users/Users.tsx","Components/Users/UsersContainer.tsx","App.tsx","redux/redux-store.ts","index.tsx","Components/Dialogs/Dialogs.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","NavBar","nav","item","NavLink","to","activeClassName","activeLink","ProfileInfo","ava","alt","description","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newText","Post","props","trim","like","MyPosts","postsElements","map","p","key","text","onChange","event","currentTarget","value","updateNewPostText","button","onClick","addPost","MyPostsContainer","connect","profilePage","dispatch","addPostActionCreator","Profile","News","Music","Settings","dialogs","name","img","messages","newMessageText","dialogsReducer","DialogItem","path","dialog","Message","mes","Dialogs","dialogsPage","messagesElements","m","dialogsElements","d","newMessageBody","dialogsItems","updateNewMessageBody","sendMessage","DialogsContainer","updateNewMessageTextActionCreator","addMessageActionCreator","users","pageSize","totalUsersCount","currentPage","usersReducer","u","userID","followed","count","Users","pagesCount","Math","ceil","pages","i","push","e","onPageChanged","selectedPage","photos","small","userPhoto","photo","unfollow","follow","status","UsersContainer","pageNumber","setCurrentPage","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","totalCount","React","Component","usersPage","followAC","unfollowAC","setUsersAC","setCurrentPageAC","App","Route","render","reducers","combineReducers","store","createStore","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6a2a405b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"description\":\"ProfileInfo_description__RuL1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__hC89A\",\"selectedPage\":\"Users_selectedPage__2rBpW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","module.exports = __webpack_public_path__ + \"static/media/user-profile-icon-png.b3e90dfe.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img className={s.ava} src=\"https://pp.userapi.com/c836122/v836122008/21c67/Y7IEYj7QrEo.jpg\" alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.description}>\r\n                Description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionTypes, ProfilePageType} from \"./store\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    newPostText: \"\"\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText: newPostText\r\n    } as const\r\n}\r\nexport const updateNewPostTextActionCreator = (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: body\r\n    } as const\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message.trim()}\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerType} from \"./MyPostsContainer\";\r\n\r\nconst MyPosts: React.FC<MyPostsContainerType> = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}/>)\r\n\r\n    let addPost = () => {\r\n        props.addPost(props.newPostText);\r\n    }\r\n\r\n    let onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = event.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <textarea className={s.text}\r\n                              onChange={onPostChange}\r\n                              value={props.newPostText}\r\n                    />\r\n                </div>\r\n                <div className={s.button}>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import {addPostActionCreator, updateNewPostTextActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../redux/redux-store\";\r\nimport {PostsType} from \"./Post/Post\";\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsContainerType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        updateNewPostText: (newText: string) => {\r\n            dispatch(updateNewPostTextActionCreator(newText))\r\n        },\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className={s.item}>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ],\r\n    newMessageText: \"\"\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                newMessageText: \"\",\r\n                messages: [...state.messages, {id: 5, message: state.newMessageText}]\r\n            }\r\n\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        newMessageText: newMessageText\r\n    } as const\r\n}\r\nexport const updateNewMessageTextActionCreator = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        newText: newText\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\n\r\nconst Dialogs: React.FC<DialogsContainerType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage(props.dialogsPage.newMessageText)\r\n    }\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n    let onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newText = event.currentTarget.value;\r\n        props.updateNewMessageBody(newText);\r\n    }\r\n\r\n    let newMessageBody = state.newMessageText;\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea className={s.text} onChange={onMessageChange} value={newMessageBody}/>\r\n                <button className={s.button} onClick={onSendMessageClick}>➤</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: MessagesPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n    updateNewMessageBody: (newText: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        updateNewMessageBody: (newText: string) => {\r\n            dispatch(updateNewMessageTextActionCreator(newText))\r\n        },\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n\r\nexport default DialogsContainer;","import {ActionTypes, UserType} from \"./store\";\r\nimport {UsersMapStateToPropsType} from \"../Components/Users/UsersContainer\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1\r\n};\r\nconst usersReducer = (state: UsersMapStateToPropsType = initialState, action: ActionTypes): UsersMapStateToPropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followAC = (userID: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const unfollowAC = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const setUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n};\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage: currentPage\r\n    } as const\r\n};\r\nexport const setTotalUsersCountAC = (totalUsersCont: number) => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCont\r\n    } as const\r\n};\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-profile-icon-png.png\"\r\nimport {UserType} from \"../../redux/store\";\r\n\r\nexport type UserPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst Users = (props: UserPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++)\r\n        pages.push(i)\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span\r\n                    onClick={((e) => props.onPageChanged(p))}\r\n                    className={props.currentPage === p\r\n                        ? s.selectedPage : \"\"}>\r\n                    {p}\r\n                </span>\r\n            })}\r\n        </div>\r\n        {props.users.map((u) =>\r\n                <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <img src={u.photos.small ? u.photos.small : userPhoto}\r\n                                 className={s.photo}\r\n                                 alt={\"avatar\"}/>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button onClick={() => {props.unfollow(u.id)}}>\r\n                                    Unfollow\r\n                                </button> :\r\n                                <button onClick={() => {props.follow(u.id)}}>\r\n                                    Follow\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>\"u.location.country\"</div>\r\n                        <div>\"u.location.city\"</div>\r\n                    </span>\r\n                </div>\r\n        )}\r\n    </div>\r\n}\r\nexport default Users;","import {connect} from \"react-redux\";\r\nimport {followAC, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, unfollowAC} from \"../../redux/users-reducer\";\r\nimport {ActionTypes, UserType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\n\r\nexport type PropsType = {\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCont: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <Users\r\n            totalUsersCount={this.props.totalUsersCount}\r\n            pageSize={this.props.pageSize}\r\n            currentPage={this.props.currentPage}\r\n            onPageChanged={this.onPageChanged}\r\n            users={this.props.users}\r\n            follow={this.props.follow}\r\n            unfollow={this.props.unfollow}\r\n        />\r\n    }\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nexport type  UsersMapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n}\r\n\r\nexport type UsersContainerTypes = OwnPropsType & UsersMapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        follow: (userID: number) => {\r\n            dispatch(followAC(userID))\r\n        },\r\n        unfollow: (userID: number) => {\r\n            dispatch(unfollowAC(userID))\r\n        },\r\n        setUsers: (users: Array<UserType>) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(setCurrentPageAC(currentPage))\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect<UsersMapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(UsersContainer);\r\n","import React from 'react';\nimport {Route} from \"react-router-dom\"\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport Profile from \"./Components/Profile/Profile\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\n\n\nconst App = () => {\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <NavBar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile\"\n                       render={() => <Profile/>}/>\n                <Route path=\"/users\"\n                       render={() => <UsersContainer/>}/>\n                <Route path=\"/dialogs\"\n                       render={() => <DialogsContainer/>}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};"],"sourceRoot":""}