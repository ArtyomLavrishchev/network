{"version":3,"sources":["Components/Profile/Profile.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileData.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","Components/Profile/MyPosts/ProfileInfo/Contacts.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileData.tsx","Components/Profile/MyPosts/ProfileInfo/Photo.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.ts","Components/Profile/Profile.tsx","hoc/WithAuthRedirect.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","statusContainer","size","onClick","type","icon","EditOutlined","width","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","title","visible","onOk","onCancel","onSubmit","s","formSummaryError","span","createField","Input","Textarea","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","wrapper","editBtn","fullName","align","justify","lookingForAJob","lookingForAJobDescription","aboutMe","Photo","savePhoto","name","file","originFileObj","avatar","src","photos","large","backgroundColor","UserOutlined","uploadBtn","showUploadList","accept","shape","UploadOutlined","ProfileInfo","saveProfile","initialValues","fomData","then","Preloader","Post","item","alt","message","deletePost","id","delete","like","likesCount","MyPosts","React","memo","postsElements","posts","p","AddPostFormRedux","values","addPost","newPostBody","Field","component","text","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","postId","deletePostAC","Profile","mapStateToPropsForRedirect","isAuth","auth","ProfileContainer","userId","this","match","params","String","authorisedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","isFetching","Component","compose","RedirectComponent","Redirect","to","withRouter"],"mappings":"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","file":"static/js/4.a17f0eb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"ProfileStatus_statusContainer__1wmQo\",\"status\":\"ProfileStatus_status__jPK6p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileData_wrapper__185Zg\",\"editBtn\":\"ProfileData_editBtn__1uGXR\",\"fullName\":\"ProfileData_fullName__12D8M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__1F9Qt\",\"avatar\":\"ProfileInfo_avatar__3bOId\",\"uploadBtn\":\"ProfileInfo_uploadBtn__1N9Xr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"MyPosts_title__2hwFf\",\"item\":\"MyPosts_item__1TYte\",\"text\":\"MyPosts_text__2pAJb\",\"form\":\"MyPosts_form__GpAlj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\",\"delete\":\"Post_delete__15KiY\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Button, Input} from \"antd\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\nimport style from \"./ProfileStatus.module.css\"\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={style.statusContainer}>\r\n            {!editMode &&\r\n            <div>\r\n                <span className={style.status}><b>Status: </b>{props.status || \"Your status:\"}</span>\r\n                <Button size={\"large\"} onClick={activateEditMode} type={\"link\"} icon={<EditOutlined/>}/>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <Input style={{width: \"250px\"}} size={\"middle\"} onChange={onStatusChange} autoFocus\r\n                       onBlur={deActivateEditMode} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {createField, Input, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport s from \"../../../Common/FormsControls/FormsControls.module.css\";\r\nimport {Col, Modal, Row} from 'antd';\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType, ProfileFormPropsType> & ProfileFormPropsType> = (\r\n    {\r\n        handleSubmit,\r\n        profile,\r\n        error,\r\n        setEditMode,\r\n        editMode\r\n    }) => {\r\n\r\n    const handleCancel = () => {\r\n        setEditMode(false);\r\n    };\r\n    return <div>\r\n        <Modal title=\"Basic Modal\" visible={editMode} onOk={handleSubmit} onCancel={handleCancel}>\r\n            <form onSubmit={handleSubmit}>\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <Row>\r\n                        <Col span={12}>\r\n                            <b>Full name: </b>\r\n                            {createField('Full name', 'fullName', [], Input, null, null)}\r\n                            <b>Looking for a job: </b>\r\n                            {createField('', 'lookingForAJob', [], Input, null, {type: \"checkbox\"})}\r\n                            <b>My professional skills: </b>\r\n                            {createField('My professional skills', 'lookingForAJobDescription', [], Textarea, null, null)}\r\n                            <b>About me: </b>\r\n                            {createField('About me', 'aboutMe', [], Textarea, null, null)}\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            {profile && <div>\r\n                                <b>Contacts: </b> {Object.keys(profile.contacts).map((key) => {\r\n                                return <div key={key}>\r\n                                    <b>{key}: </b> {createField(key, 'contacts.' + key, [], Input, null, null)}\r\n                                </div>\r\n                            })}\r\n                            </div>}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </form>\r\n        </Modal>\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileFormDataType, ProfileFormPropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport type ProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    aboutMe: string\r\n}\r\nexport type ProfileFormPropsType = {\r\n    profile: ProfileType\r\n    editMode: boolean\r\n    setEditMode: Dispatch<SetStateAction<boolean>>\r\n}","import React from \"react\";\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            {contactValue &&\r\n            <div>\r\n                <b>{contactTitle}: </b> {contactValue}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n","import React from \"react\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport {Contact} from \"./Contacts\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport style from \"./ProfileData.module.css\"\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\n\r\nexport const ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div className={style.wrapper}>\r\n            {profile &&\r\n            <>\r\n                {isOwner && <div className={style.editBtn}>\r\n                    <Button size={\"large\"} type=\"link\" onClick={goToEditMode} icon={<EditOutlined/>}/>\r\n                </div>}\r\n                <h2 className={style.fullName}>{profile.fullName}</h2>\r\n                <Row align={\"top\"} justify={\"start\"}>\r\n                    <Col span={8}>\r\n                        <div>\r\n                        </div>\r\n                        <div>\r\n                            <b>Looking for a job: </b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n                        </div>\r\n                        {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n                        </div>\r\n                        }\r\n                        <div>\r\n                            <b>About me: </b> {profile.aboutMe}\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                        <div>\r\n                            <b>Contacts: </b> {Object.keys(profile.contacts).map((key) => {\r\n                            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                        })}\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType =\r\n{\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}","import React from 'react';\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport {UploadOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {Avatar, Button, Image, Upload} from \"antd\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\n\r\nconst Photo: React.FC<PhotoType> = (\r\n    {\r\n        profile,\r\n        isOwner,\r\n        savePhoto\r\n    }\r\n) => {\r\n    const props = {\r\n        name: 'file',\r\n        onChange(e: any) {\r\n            if (e.file.originFileObj) {\r\n                savePhoto(e.file.originFileObj)\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.avatar}>\r\n                <Avatar\r\n                    size={250}\r\n                    src={profile && profile.photos.large ? <Image src={profile.photos.large}/> :\r\n                        <Avatar size={250} style={{backgroundColor: '#ffd363'}} icon={<UserOutlined/>}/>}\r\n                />\r\n                <div className={style.uploadBtn}>\r\n                    {isOwner &&\r\n                    <Upload showUploadList={false} accept=\"image/png, image/jpeg\" {...props}>\r\n                        <Button type={\"primary\"} shape={\"circle\"} icon={<UploadOutlined/>}/>\r\n                    </Upload>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photo;\r\n\r\ntype PhotoType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void\r\n}\r\n","import React, {useState} from 'react';\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileDataFormRedux, ProfileFormDataType} from \"./ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport Photo from \"./Photo\";\r\nimport {Col, Row} from \"antd\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: any\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = (\r\n    {\r\n        profile,\r\n        status,\r\n        updateStatus,\r\n        isOwner,\r\n        savePhoto,\r\n        saveProfile\r\n    }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const goToEditMode = () => setEditMode(true)\r\n    const onSubmit = (fomData: ProfileFormDataType) => {\r\n        saveProfile(fomData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n\r\n    if (!profile) return <Preloader/>;\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <Photo profile={profile} isOwner={isOwner} savePhoto={savePhoto}/>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n                </Col>\r\n                <Col span={18}>\r\n                    {editMode ?\r\n                        <ProfileDataFormRedux editMode={editMode} setEditMode={setEditMode} profile={profile}\r\n                                              initialValues={profile} onSubmit={onSubmit}/> :\r\n                        <ProfileData isOwner={isOwner} profile={profile} goToEditMode={goToEditMode}/>}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n    deletePost?: (postId: number) => void\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    const deletePost = () => {\r\n        props.deletePost && props.deletePost(props.id)\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div onClick={deletePost} className={s.delete}>Delete post</div>\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}\r\n            deletePost={props.deletePost}\r\n        />)\r\n\r\n    let addPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3 className={s.title}>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.form}>\r\n                <Field\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newPostBody\"}\r\n                    placeholder={\"What's new?\"}\r\n                />\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: \"profileAddPostForm\"})(AddPostForm)\r\nexport default MyPosts;","import {addPostActionCreator, deletePostAC} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../redux/redux-store\";\r\nimport {PostsType} from \"./Post/Post\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n    deletePost: (postId: number) => void\r\n}\r\n\r\nexport type MyPostsContainerType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        },\r\n        deletePost: (postId: number) => {\r\n            dispatch(deletePostAC(postId))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo, {ProfilePropsType} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div className={s.item}>\r\n        <ProfileInfo profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     isOwner={props.isOwner}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}\r\n        />\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: React.FC) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router'\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorisedUserId)\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isFetching: state.profilePage.isFetching,\r\n        status: state.profilePage.status,\r\n        authorisedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile})\r\n)(ProfileContainer)\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isFetching: boolean\r\n    status: string\r\n    authorisedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (UserId: string) => void\r\n    getStatus: (UserId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: any\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype OwnPropsType = {}"],"sourceRoot":""}