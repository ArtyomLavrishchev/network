{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","assets/images/loader.svg","Components/Profile/Profile.module.css","serviceWorker.ts","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","Components/Users/Users.tsx","Components/Common/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.ts","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/Login.tsx","App.tsx","redux/redux-store.ts","index.tsx","Components/Dialogs/Dialogs.module.css","Components/Users/Users.module.css","Components/Profile/MyPosts/MyPosts.module.css","assets/images/user-profile-icon-png.png","Components/Common/FormsControls/FormsControls.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","NavBar","className","s","nav","item","NavLink","to","activeClassName","activeLink","News","Music","Settings","initialState","dialogs","id","name","img","messages","message","dialogsReducer","state","action","type","body","newMessageBody","DialogItem","props","path","dialog","src","Message","mes","FormControl","input","meta","child","element","hasError","touched","error","finalClassName","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","maxLength15","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","component","text","placeholder","button","Dialogs","dialogsPage","messagesElements","map","m","key","dialogsElements","d","isAuth","dialogsItems","values","sendMessage","Redirect","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","addMessageActionCreator","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","post","resultCode","delete","userId","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowingProgress","usersReducer","u","userID","followed","count","filter","Users","pagesCount","Math","ceil","pages","i","push","item1","p","pageClass","selectedPage","onClick","e","onPageChanged","photos","small","userPhoto","photo","alt","disabled","some","unfollow","follow","Preloader","preloader","UsersContainer","pageNumber","getUsers","usersPage","followSuccess","unfollowSuccess","items","totalCount","setCurrentPage","ProfileStatus","editMode","activateEditMode","setState","deActivateEditMode","onStatusChange","currentTarget","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","profile","ava","large","fullName","lookingForAJobDescription","posts","likesCount","setProfileStatus","profileReducer","newPost","newPostBody","newPostText","Post","like","maxLength10","AddPostFormRedux","MyPosts","postsElements","addPost","MyPostsContainer","profilePage","addPostActionCreator","Profile","ProfileContainer","params","getUserProfile","withRouter","Header","header","loginBlock","login","email","authReducer","HeaderContainer","getAuthUserData","setAuthUserData","LoginReduxForm","Login","fomData","log","App","Route","render","DialogsContainer","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4f25bd8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","module.exports = __webpack_public_path__ + \"static/media/loader.dc9a5222.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import {ActionTypes, MessagesPageType} from \"./store\";\r\n\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Артём\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Алёна\",\r\n            img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Валерия\",\r\n            img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Кирилл\",\r\n            img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Таня\",\r\n            img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"\r\n        }\r\n    ],\r\n    messages: [\r\n        {id: 1, message: \"Hi!\"},\r\n        {id: 2, message: \"How is your IT-incubator?\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"Yo\"}\r\n    ]\r\n};\r\n\r\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 5, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\nconst FormControl = (\r\n    {\r\n        input, meta, child, element, ...props\r\n    }: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    const finalClassName = hasError ? `${s.formControl} ${s.error}` : s.formControl\r\n    return (\r\n        <div className={finalClassName}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","export const required = (value: any) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\"\r\n}\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if(value && value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsContainerType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let messagesElements =\r\n        state.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem\r\n        key={d.id}\r\n        name={d.name}\r\n        id={d.id}\r\n        img={d.img}/>)\r\n\r\n    let addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\nconst maxLength15 = maxLengthCreator(15)\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLength15]}\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"Enter your message\"}\r\n                />\r\n                <button className={s.button}>➤</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: any) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"cdeea33e-f7dc-46e4-8742-31d419028410\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`, {})\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data.resultCode)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please profileAPI objet.')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get('profile/status/' + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status/', {status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {ActionTypes, DispatchType, UserType} from \"./store\";\r\nimport {UsersMapStateToPropsType} from \"../Components/Users/UsersContainer\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'SET_TOTAL_USER_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n};\r\nconst usersReducer = (state: UsersMapStateToPropsType = initialState, action: ActionTypes): UsersMapStateToPropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id !== action.userId),\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userID: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userID: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID: userID\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n};\r\nexport const setTotalUsersCount = (totalUsersCont: number) => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        count: totalUsersCont\r\n    } as const\r\n};\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n};\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n};\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) =>\r\n    (dispatch: DispatchType) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n            dispatch(setCurrentPage(currentPage))\r\n        });\r\n    }\r\n\r\nexport const follow = (userID: number) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    usersAPI.follow(userID).then(resultCode => {\r\n        if (resultCode === 0) {\r\n            dispatch(followSuccess(userID))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userID))\r\n    });\r\n}\r\n\r\nexport const unfollow = (userID: number) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    usersAPI.unfollow(userID).then(resultCode => {\r\n        if (resultCode === 0) {\r\n            dispatch(unfollowSuccess(userID))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userID))\r\n    });\r\n}\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user-profile-icon-png.png\"\r\nimport {UserType} from \"../../redux/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UserPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: UserPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++)\r\n        pages.push(i)\r\n\r\n\r\n    return <div className={s.item}>\r\n        <div className={s.item1}>\r\n            {pages.map(p => {\r\n                let pageClass = props.currentPage === p ? s.selectedPage : s.pages\r\n                return <span\r\n                    onClick={((e) => props.onPageChanged(p))}\r\n                    className={pageClass}>\r\n                    {p}\r\n                </span>\r\n            })}\r\n        </div>\r\n        {props.users.map((u) =>\r\n            <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                            <img src={u.photos.small ? u.photos.small : userPhoto}\r\n                                 className={s.photo}\r\n                                 alt={\"avatar\"}/>\r\n                                 </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.unfollow(u.id)\r\n                                        }}>\r\n                                    Unfollow\r\n                                </button> :\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={() => {\r\n                                            props.follow(u.id)\r\n                                        }}>\r\n                                    Follow\r\n                                </button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                <span>\r\n                        <div>\"u.location.country\"</div>\r\n                        <div>\"u.location.city\"</div>\r\n                    </span>\r\n            </div>\r\n        )}\r\n    </div>\r\n}\r\nexport default Users;","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loader.svg\";\r\n\r\ntype PreloaderType = {}\r\n\r\nconst Preloader = (props: PreloaderType) => {\r\n    return <div>\r\n        <img src={preloader} alt={'preloader'}/>\r\n    </div>\r\n}\r\nexport default Preloader;","import {connect} from \"react-redux\";\r\nimport {follow, getUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {UserType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype OwnPropsType = {}\r\nexport type  UsersMapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (UserId: number) => void\r\n    unfollow: (UserId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\ntype PropsType = UsersMapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ?\r\n                <Preloader/> :\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): UsersMapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<UsersMapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {follow, unfollow, getUsers})\r\n)(UsersContainer)","import React, {ChangeEvent} from 'react';\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<ProfileStatusType>) {\r\n        if(prevProps.status !== this.props.status)\r\n        this.setState({status: this.props.status})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {!this.state.editMode &&\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"Your status:\"}</span>}\r\n                </div>\r\n                <div>\r\n                    {this.state.editMode &&\r\n                    <input onChange={this.onStatusChange} autoFocus onBlur={this.deActivateEditMode}\r\n                           value={this.state.status}/>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../../redux/store\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../../assets/images/user-profile-icon-png.png\"\r\nimport ProfileStatus from \"./ProfileStatus\"\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n    if (props.profile) {\r\n        return <div className={s.item}>\r\n            <div>\r\n                <img className={s.ava} src={props.profile.photos.large ? props.profile.photos.large : userPhoto}\r\n                     alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.fullName}>\r\n                <h2>{props.profile.fullName}</h2>\r\n            </div>\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            <div>\r\n                {props.profile.lookingForAJobDescription}\r\n            </div>\r\n        </div>\r\n    } else {\r\n        return <Preloader/>\r\n    }\r\n}\r\n\r\nexport default ProfileInfo;","import {ActionTypes, DispatchType, ProfilePageType, ProfileType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst SET_STATUS = 'SET_STATUS';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n        {id: 3, message: \"abracadabra\", likesCount: 999},\r\n    ],\r\n    profile: null,\r\n    isFetching: false,\r\n    status: \"\"\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostBody: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostBody\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const setProfileStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport const getStatus = (userId: string) => (dispatch: DispatchType) => {\r\n    profileAPI.getStatus(userId)\r\n        .then(response => {\r\n            dispatch(setProfileStatus(response.data))\r\n        })\r\n}\r\nexport const updateStatus = (status: string) => (dispatch: DispatchType) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setProfileStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => (dispatch: DispatchType) => {\r\n    dispatch(toggleIsFetching(true))\r\n    usersAPI.getProfile(userId).then(response => {\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUserProfile(response.data))\r\n    })\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://mygamehunter.ru/images/thumbnail/54027/550\" alt=\"avatar\"/>\r\n            {props.message}\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsContainerType> = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}/>)\r\n\r\n    let addPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    validate={[required, maxLength10]}\r\n                    component={Textarea}\r\n                    className={s.text}\r\n                    name={\"newPostBody\"}\r\n                    placeholder={\"What's new?\"}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: \"profileAddPostForm\"})(AddPostForm)\r\nexport default MyPosts;","import {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\nimport {RootStateRedux} from \"../../../redux/redux-store\";\r\nimport {PostsType} from \"./Post/Post\";\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nexport type MyPostsContainerType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: RootStateRedux) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo, {ProfilePropsType} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div className={s.item}>\r\n        <ProfileInfo profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../redux/store\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router'\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isFetching: boolean\r\n    status: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (UserId: string) => void\r\n    getStatus: (UserId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype OwnPropsType = {}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '10952'\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> :\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                />\r\n            }</>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateRedux): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isFetching: state.profilePage.isFetching,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\nexport default compose(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, RootStateRedux>\r\n    (mapStateToProps, {getUserProfile, getStatus, updateStatus})\r\n)(ProfileContainer)\r\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthMapStateToPropsType} from \"./HeaderContainer\";\r\n\r\nconst Header = (props: AuthMapStateToPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"\r\n                alt={'avatar'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? props.login : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {ActionTypes, DispatchType} from \"./store\";\r\nimport {AuthMapStateToPropsType} from \"../Components/Header/HeaderContainer\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nexport type AuthReducerType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n} | AuthMapStateToPropsType\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\nconst authReducer = (state: AuthReducerType = initialState, action: ActionTypes): AuthReducerType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number, email: string, login: string) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, email, login}\r\n    } as const\r\n};\r\nexport const getAuthUserData = () => (dispatch: DispatchType) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login));\r\n            }\r\n        });\r\n};\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {RootStateRedux} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {}\r\nexport type AuthMapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype AuthMapDispatchToPropsType = {\r\n    getAuthUserData: () => void\r\n}\r\nexport type AuthPropsType = AuthMapStateToPropsType & AuthMapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateRedux): AuthMapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\nexport default connect<AuthMapStateToPropsType, AuthMapDispatchToPropsType, OwnPropsType, RootStateRedux>(mapStateToProps, {getAuthUserData})(HeaderContainer);","import React from \"react\";\r\nimport {reduxForm, InjectedFormProps, Field} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate={[required, maxLength10]} component={Input} name={\"login\"} placeholder={\"Login\"}/>\r\n            </div>\r\n            <div>\r\n                <Field validate={[required, maxLength10]} component={Input} name={\"password\"} placeholder={\"Password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"} /> remember me\r\n            </div>\r\n            <div>\r\n                <button >Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({ form: \"login\"})(LoginForm)\r\n\r\nconst Login = () => {\r\n    const onSubmit = (fomData: FormDataType) => {\r\n        console.log(fomData)\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n           <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport {Route} from \"react-router-dom\"\nimport \"./App.css\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\n\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/Login/Login\";\n\n\nconst App = () => {\n    return (\n        <div className=\"app-wrapper\">\n            <HeaderContainer/>\n            <NavBar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile/:userId?\"\n                       render={() => <ProfileContainer/>}/>\n                <Route path=\"/users\"\n                       render={() => <UsersContainer/>}/>\n                <Route path=\"/dialogs\"\n                       render={() => <DialogsContainer/>}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n                <Route path=\"/login\" render={() => <Login/>}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type RootStateRedux = ReturnType<typeof reducers> & ReturnType<typeof applyMiddleware>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__hC89A\",\"pages\":\"Users_pages__2yck5\",\"selectedPage\":\"Users_selectedPage__2rBpW\",\"item1\":\"Users_item1__2zN0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","module.exports = __webpack_public_path__ + \"static/media/user-profile-icon-png.b3e90dfe.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2x2Pb\",\"error\":\"FormsControls_error__1NuZ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"fullName\":\"ProfileInfo_fullName__2tX4D\",\"job\":\"ProfileInfo_job__1vldL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\",\"loginBlock\":\"Header_loginBlock__1zz0x\"};"],"sourceRoot":""}