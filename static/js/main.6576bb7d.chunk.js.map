{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css","Components/Profile/Profile.module.css","Components/Dialogs/DialogItem/DialogsItem.module.css","Components/Dialogs/Message/Message.module.css","serviceWorker.ts","Components/Header/Header.tsx","Components/Navbar/Navbar.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","redux/state.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["module","exports","nav","item","activeLink","dialogs","dialogsItems","messages","dialog","text","button","posts","ava","descr","like","header","mes","Boolean","window","location","hostname","match","Header","react_default","a","createElement","className","s","src","NavBar","NavLink","to","activeClassName","ProfileInfo","Post","props","message","trim","likesCount","MyPosts","postsElements","map","p","MyPosts_Post_Post","key","id","onChange","event","dispatch","type","newText","currentTarget","value","newPostText","onClick","store","_state","profilePage","messagesPage","name","img","newMessageText","_callSubscriber","console","log","subscribe","observer","this","getState","action","newPost","push","newMessage","Profile","MyPosts_ProfileInfo_ProfileInfo","Profile_MyPosts_MyPosts","DialogItem","path","Message","Dialogs","messagePage","m","Dialogs_Message_Message","dialogsElements","d","Dialogs_DialogItem_DialogItem","News","Music","Settings","App","state","Components_Header_Header","Navbar","Route","render","Components_Profile_Profile","bind","Components_Dialogs_Dialogs","Components_News_News","Components_Music_Music","Settings_Settings","rerenderEntireTree","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6576bb7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1gWkt\",\"item\":\"Navbar_item__3jhBU\",\"activeLink\":\"Navbar_activeLink__2cDz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1PpnL\",\"dialogsItems\":\"Dialogs_dialogsItems__2CzU1\",\"messages\":\"Dialogs_messages__2F0gY\",\"dialog\":\"Dialogs_dialog__27aTc\",\"text\":\"Dialogs_text__2ddsK\",\"button\":\"Dialogs_button__3iZil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__1TYte\",\"posts\":\"MyPosts_posts__1U0pU\",\"text\":\"MyPosts_text__2pAJb\",\"button\":\"MyPosts_button__1PCPA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProfileInfo_item__KyvD9\",\"ava\":\"ProfileInfo_ava__2Yzge\",\"descr\":\"ProfileInfo_descr__3rgFH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Kqhl\",\"like\":\"Post_like__1JT1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3K1r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Profile_item__rxeZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3YB8l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mes\":\"Message_mes__2SJ4f\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://upload.wikimedia.org/wikipedia/ru/thumb/3/37/Jumpman_logo.svg/1200px-Jumpman_logo.svg.png\"/>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default NavBar;","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div className={s.item}>\r\n        <div>\r\n            {/*<img src=\"https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg\"/>*/}\r\n        </div>\r\n        <div>\r\n            <img className={s.ava} src=\"https://pp.userapi.com/c836122/v836122008/21c67/Y7IEYj7QrEo.jpg\"/>\r\n        </div>\r\n            <div className={s.descr}>\r\n                Description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nexport type PostsType = {\r\n    id?: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://yt3.ggpht.com/a/AGF-l7-MVpKP7wI1cV_VsIoRTe_zN7QuGXqugrlDqQ=s900-c-k-c0xffffffff-no-rj-mo\"/>\r\n            {props.message.trim()}\r\n            <div className={s.like}>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post, {PostsType} from \"./Post/Post\";\r\nimport {ActionTypes} from \"../../../redux/state\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post\r\n            key={p.id}\r\n            message={p.message}\r\n            likesCount={p.likesCount}/>)\r\n    let addPost = () => {\r\n        props.dispatch({type: \"ADD-POST\", newPostText: props.newPostText});\r\n    }\r\n    let onPostChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch({type: \"UPDATE-NEW-POST-TEXT\", newText: event.currentTarget.value});\r\n    }\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <textarea className={s.text} onChange={onPostChange}\r\n                              value={props.newPostText}/>\r\n                </div>\r\n                <div className={s.button}>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import {PostsType} from \"../Components/Profile/MyPosts/Post/Post\";\r\nimport {DialogsType} from \"../Components/Dialogs/DialogItem/DialogItem\";\r\nimport {MessageType} from \"../Components/Dialogs/Message/Message\";\r\n\r\n\r\nexport type MessagesPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\nexport type StatePropsType = {\r\n    profilePage: ProfilePageType\r\n    messagesPage: MessagesPageType\r\n}\r\n\r\ntype AddMessageActionType = {\r\n    type: \"ADD-MESSAGE\"\r\n    newMessageText: string\r\n}\r\n\r\ntype ChangeNewMessageActionType = {\r\n    type: \"UPDATE-NEW-MESSAGE-TEXT\"\r\n    newText: string\r\n}\r\n\r\ntype AddPostActionType = {\r\n    type: \"ADD-POST\"\r\n    newPostText: string\r\n}\r\n\r\ntype ChangeNewTextActionType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    newText: string\r\n}\r\n\r\nexport type ActionTypes =\r\n    AddPostActionType |\r\n    ChangeNewTextActionType |\r\n    AddMessageActionType |\r\n    ChangeNewMessageActionType\r\n\r\nexport type StoreType = {\r\n    _state: StatePropsType\r\n    _callSubscriber: () => void\r\n    subscribe: (observer: () => void) => void\r\n    getState: () => StatePropsType\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nlet store: StoreType = {\r\n\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n                {id: 2, message: \"It's my first post.\", likesCount: 11},\r\n                {id: 3, message: \"abracadabra\", likesCount: 999},\r\n            ],\r\n            newPostText: \"\"\r\n        },\r\n        messagesPage: {\r\n            dialogs: [\r\n                {\r\n                    id: 1,\r\n                    name: \"Артём\",\r\n                    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRltvBEVwZUC1nI-q-4QnueJjvDFPOrHqBWig&usqp=CAU\"\r\n                },\r\n                {id: 2, name: \"Алёна\", img: \"https://topmsg.ru/wp-content/uploads/paren-v-pidzhake-i-kepke.jpg\"},\r\n                {id: 3, name: \"Валерия\", img: \"https://pubg.best/data/avatars/l/0/721.jpg?1531143739\"},\r\n                {\r\n                    id: 4,\r\n                    name: \"Кирилл\",\r\n                    img: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR_RfqA1o6QkxYWBxk_-TCF28EBlasrxI-wWQ&usqp=CAU\"\r\n                },\r\n                {id: 5, name: \"Таня\", img: \"https://f1.upet.com/A_r2u6uZhnxA_x.jpg\"}\r\n            ],\r\n            messages: [\r\n                {id: 1, message: \"Hi!\"},\r\n                {id: 2, message: \"How is your IT-incubator?\"},\r\n                {id: 3, message: \"Yo\"},\r\n                {id: 4, message: \"Yo\"}\r\n            ],\r\n            newMessageText: \"\"\r\n        },\r\n    },\r\n\r\n    _callSubscriber() {\r\n        console.log(\"State changed\")\r\n    },\r\n\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n\r\n    dispatch(action) {\r\n        if (action.type === \"ADD-POST\") {\r\n            const newPost = {\r\n                id: 4,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            this._state.profilePage.posts.push(newPost);\r\n            this._state.profilePage.newPostText = \"\";\r\n\r\n            this._callSubscriber();\r\n        } else if (action.type === \"UPDATE-NEW-POST-TEXT\") {\r\n            this._state.profilePage.newPostText = action.newText;\r\n            this._callSubscriber()\r\n        } else if (action.type === \"ADD-MESSAGE\") {\r\n            const newMessage: MessageType = {\r\n                message: action.newMessageText\r\n            };\r\n            this._state.messagesPage.messages.push(newMessage);\r\n            this._state.messagesPage.newMessageText = \"\";\r\n\r\n            store._callSubscriber();\r\n        } else if (action.type === \"UPDATE-NEW-MESSAGE-TEXT\") {\r\n            this._state.messagesPage.newMessageText = action.newText;\r\n            this._callSubscriber();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport store, {ProfilePageType} from \"../../redux/state\";\r\nimport {ActionTypes} from \"../../redux/state\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profilePage: ProfilePageType\r\n    newPostText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <ProfileInfo/>\r\n            <MyPosts\r\n                posts={store._state.profilePage.posts}\r\n                newPostText={store._state.profilePage.newPostText}\r\n                dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div>\r\n        <NavLink className={s.dialog} to={path}><img src={props.img}/>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./Message.module.css\"\r\n\r\nexport type MessageType = {\r\n    id?: number\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.mes}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {ActionTypes, MessagesPageType} from \"../../redux/state\";\r\n\r\ntype DialogsPropsType = {\r\n    messagePage: MessagesPageType\r\n    newMessageText: string\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let newMessage =\r\n        props.messagePage.messages.map(m => <Message message={m.message}/>)\r\n\r\n    let addMessage = () => {\r\n        props.dispatch({type: \"ADD-MESSAGE\", newMessageText: props.newMessageText})\r\n    }\r\n    let dialogsElements = props.messagePage.dialogs.map(d => <DialogItem name={d.name} id={d.id} img={d.img}/>)\r\n    let onMessageChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.dispatch({type: \"UPDATE-NEW-MESSAGE-TEXT\", newText: event.currentTarget.value});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {newMessage}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <textarea className={s.text} onChange={onMessageChange} value={props.newMessageText}/>\r\n                <button className={s.button} onClick={addMessage}>➤</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport {Route} from \"react-router-dom\"\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\nimport NavBar from \"./Components/Navbar/Navbar\";\nimport Profile from \"./Components/Profile/Profile\";\nimport Dialogs from \"./Components/Dialogs/Dialogs\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport {Settings} from \"./Components/Settings/Settings\";\nimport {StatePropsType, StoreType} from \"./redux/state\";\nimport {ActionTypes} from \"./redux/state\";\n\n\ntype PropsType = {\n    store: StoreType\n    state: StatePropsType\n    dispatch: (action: ActionTypes) => void\n}\n\nconst App: React.FC<PropsType> = (props) => {\n\n    const state = props.store.getState();\n\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <NavBar/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile\"\n                       render={() => <Profile\n                           profilePage={state.profilePage}\n                           dispatch={props.store.dispatch.bind(props.store)}\n                           newPostText={state.profilePage.newPostText}\n                       />}/>\n                <Route path=\"/dialogs\"\n                       render={() => <Dialogs\n                           messagePage={state.messagesPage}\n                           dispatch={props.dispatch.bind(props.store)}\n                           newMessageText={state.messagesPage.newMessageText}\n                       />}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/state\";\n\nconst rerenderEntireTree = () => {\n\n    ReactDOM.render(\n        <BrowserRouter>\n\n            <App store={store} state={store.getState()} dispatch={store.dispatch.bind(store)}/>\n        </BrowserRouter>,\n        document.getElementById('root'));\n\n}\n\nrerenderEntireTree();\nstore.subscribe(rerenderEntireTree);\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}